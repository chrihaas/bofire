import datetime
from enum import Enum
from typing import Optional

from pydantic import Field, model_validator

from bofire.data_models.candidates_api.request import CandidatesRequest
from bofire.data_models.dataframes.api import Candidates


class ProposalStateEnum(str, Enum):
    """Enum for the state of a proposal."""

    CREATED = "CREATED"
    CLAIMED = "CLAIMED"
    FAILED = "FAILED"
    FINISHED = "FINISHED"


class CandidatesProposal(CandidatesRequest):
    """Model for a candidates proposal."""

    id: Optional[int] = Field(default=None, description="Proposal ID")
    candidates: Optional[Candidates] = Field(
        default=None, description="Candidates generated by the proposal"
    )
    created_at: datetime.datetime = Field(
        default_factory=datetime.datetime.now,
        description="Timestamp when the proposal was created",
    )
    last_updated_at: datetime.datetime = Field(
        default_factory=datetime.datetime.now,
        description="Timestamp when the proposal was last updated",
    )
    state: ProposalStateEnum = Field(
        default=ProposalStateEnum.CREATED, description="State of the proposal"
    )
    error_message: Optional[str] = Field(
        default=None, description="Error message if the proposal failed"
    )

    @model_validator(mode="after")
    def validate_candidates(self):
        """Validates the candidates."""
        if self.candidates is not None:
            self.strategy_data.domain.validate_candidates(
                self.candidates.to_pandas(), only_inputs=True
            )
            if len(self.candidates.rows) != self.n_candidates:
                raise ValueError(
                    f"Number of candidates ({len(self.candidates.rows)}) does not "
                    "match n_candidates ({self.n_candidates})."
                )
        return self
